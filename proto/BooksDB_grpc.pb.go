// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.16.0
// source: proto/BooksDB.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BookServiceClient is the client API for BookService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BookServiceClient interface {
	CreateBook(ctx context.Context, in *CreateBookRequest, opts ...grpc.CallOption) (*CreateBookResponse, error)
	GetBook(ctx context.Context, in *ReadBookRequest, opts ...grpc.CallOption) (*ReadBookResponse, error)
	GetBooks(ctx context.Context, in *ReadBooksRequest, opts ...grpc.CallOption) (*ReadBooksResponse, error)
	UpdateBook(ctx context.Context, in *UpdateBookRequest, opts ...grpc.CallOption) (*UpdateBookResponse, error)
	DeleteBook(ctx context.Context, in *DeleteBookRequest, opts ...grpc.CallOption) (*DeleteBookResponse, error)
	CreateAuthor(ctx context.Context, in *CreateAuthorRequest, opts ...grpc.CallOption) (*CreateAuthorResponse, error)
	GetAuthor(ctx context.Context, in *ReadAuthorRequest, opts ...grpc.CallOption) (*ReadAuthorResponse, error)
	GetAuthors(ctx context.Context, in *ReadAuthorsRequest, opts ...grpc.CallOption) (*ReadAuthorsResponse, error)
	UpdateAuthor(ctx context.Context, in *UpdateAuthorRequest, opts ...grpc.CallOption) (*UpdateAuthorResponse, error)
	DeleteAuthor(ctx context.Context, in *DeleteAuthorRequest, opts ...grpc.CallOption) (*DeleteAuthorResponse, error)
	CreateBookAuthor(ctx context.Context, in *CreateBookAuthorRequest, opts ...grpc.CallOption) (*CreateBookAuthorResponse, error)
	GetBookAuthor(ctx context.Context, in *ReadBookAuthorRequest, opts ...grpc.CallOption) (*ReadBookAuthorResponse, error)
	GetBooksAuthors(ctx context.Context, in *ReadBooksAuthorsRequest, opts ...grpc.CallOption) (*ReadBooksAuthorsResponse, error)
	UpdateBookAuthor(ctx context.Context, in *UpdateBookAuthorRequest, opts ...grpc.CallOption) (*UpdateBookAuthorResponse, error)
	DeleteBookAuthor(ctx context.Context, in *DeleteBookAuthorRequest, opts ...grpc.CallOption) (*DeleteBookAuthorResponse, error)
	GetAuthorsBook(ctx context.Context, in *ReadBookAuthorsRequest, opts ...grpc.CallOption) (*ReadBookAuthorsResponse, error)
	GetAuthorBooks(ctx context.Context, in *ReadBooksAuthorRequest, opts ...grpc.CallOption) (*ReadBooksAuthorResponse, error)
}

type bookServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBookServiceClient(cc grpc.ClientConnInterface) BookServiceClient {
	return &bookServiceClient{cc}
}

func (c *bookServiceClient) CreateBook(ctx context.Context, in *CreateBookRequest, opts ...grpc.CallOption) (*CreateBookResponse, error) {
	out := new(CreateBookResponse)
	err := c.cc.Invoke(ctx, "/BooksDB.BookService/CreateBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookServiceClient) GetBook(ctx context.Context, in *ReadBookRequest, opts ...grpc.CallOption) (*ReadBookResponse, error) {
	out := new(ReadBookResponse)
	err := c.cc.Invoke(ctx, "/BooksDB.BookService/GetBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookServiceClient) GetBooks(ctx context.Context, in *ReadBooksRequest, opts ...grpc.CallOption) (*ReadBooksResponse, error) {
	out := new(ReadBooksResponse)
	err := c.cc.Invoke(ctx, "/BooksDB.BookService/GetBooks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookServiceClient) UpdateBook(ctx context.Context, in *UpdateBookRequest, opts ...grpc.CallOption) (*UpdateBookResponse, error) {
	out := new(UpdateBookResponse)
	err := c.cc.Invoke(ctx, "/BooksDB.BookService/UpdateBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookServiceClient) DeleteBook(ctx context.Context, in *DeleteBookRequest, opts ...grpc.CallOption) (*DeleteBookResponse, error) {
	out := new(DeleteBookResponse)
	err := c.cc.Invoke(ctx, "/BooksDB.BookService/DeleteBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookServiceClient) CreateAuthor(ctx context.Context, in *CreateAuthorRequest, opts ...grpc.CallOption) (*CreateAuthorResponse, error) {
	out := new(CreateAuthorResponse)
	err := c.cc.Invoke(ctx, "/BooksDB.BookService/CreateAuthor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookServiceClient) GetAuthor(ctx context.Context, in *ReadAuthorRequest, opts ...grpc.CallOption) (*ReadAuthorResponse, error) {
	out := new(ReadAuthorResponse)
	err := c.cc.Invoke(ctx, "/BooksDB.BookService/GetAuthor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookServiceClient) GetAuthors(ctx context.Context, in *ReadAuthorsRequest, opts ...grpc.CallOption) (*ReadAuthorsResponse, error) {
	out := new(ReadAuthorsResponse)
	err := c.cc.Invoke(ctx, "/BooksDB.BookService/GetAuthors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookServiceClient) UpdateAuthor(ctx context.Context, in *UpdateAuthorRequest, opts ...grpc.CallOption) (*UpdateAuthorResponse, error) {
	out := new(UpdateAuthorResponse)
	err := c.cc.Invoke(ctx, "/BooksDB.BookService/UpdateAuthor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookServiceClient) DeleteAuthor(ctx context.Context, in *DeleteAuthorRequest, opts ...grpc.CallOption) (*DeleteAuthorResponse, error) {
	out := new(DeleteAuthorResponse)
	err := c.cc.Invoke(ctx, "/BooksDB.BookService/DeleteAuthor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookServiceClient) CreateBookAuthor(ctx context.Context, in *CreateBookAuthorRequest, opts ...grpc.CallOption) (*CreateBookAuthorResponse, error) {
	out := new(CreateBookAuthorResponse)
	err := c.cc.Invoke(ctx, "/BooksDB.BookService/CreateBookAuthor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookServiceClient) GetBookAuthor(ctx context.Context, in *ReadBookAuthorRequest, opts ...grpc.CallOption) (*ReadBookAuthorResponse, error) {
	out := new(ReadBookAuthorResponse)
	err := c.cc.Invoke(ctx, "/BooksDB.BookService/GetBookAuthor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookServiceClient) GetBooksAuthors(ctx context.Context, in *ReadBooksAuthorsRequest, opts ...grpc.CallOption) (*ReadBooksAuthorsResponse, error) {
	out := new(ReadBooksAuthorsResponse)
	err := c.cc.Invoke(ctx, "/BooksDB.BookService/GetBooksAuthors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookServiceClient) UpdateBookAuthor(ctx context.Context, in *UpdateBookAuthorRequest, opts ...grpc.CallOption) (*UpdateBookAuthorResponse, error) {
	out := new(UpdateBookAuthorResponse)
	err := c.cc.Invoke(ctx, "/BooksDB.BookService/UpdateBookAuthor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookServiceClient) DeleteBookAuthor(ctx context.Context, in *DeleteBookAuthorRequest, opts ...grpc.CallOption) (*DeleteBookAuthorResponse, error) {
	out := new(DeleteBookAuthorResponse)
	err := c.cc.Invoke(ctx, "/BooksDB.BookService/DeleteBookAuthor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookServiceClient) GetAuthorsBook(ctx context.Context, in *ReadBookAuthorsRequest, opts ...grpc.CallOption) (*ReadBookAuthorsResponse, error) {
	out := new(ReadBookAuthorsResponse)
	err := c.cc.Invoke(ctx, "/BooksDB.BookService/GetAuthorsBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookServiceClient) GetAuthorBooks(ctx context.Context, in *ReadBooksAuthorRequest, opts ...grpc.CallOption) (*ReadBooksAuthorResponse, error) {
	out := new(ReadBooksAuthorResponse)
	err := c.cc.Invoke(ctx, "/BooksDB.BookService/GetAuthorBooks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookServiceServer is the server API for BookService service.
// All implementations must embed UnimplementedBookServiceServer
// for forward compatibility
type BookServiceServer interface {
	CreateBook(context.Context, *CreateBookRequest) (*CreateBookResponse, error)
	GetBook(context.Context, *ReadBookRequest) (*ReadBookResponse, error)
	GetBooks(context.Context, *ReadBooksRequest) (*ReadBooksResponse, error)
	UpdateBook(context.Context, *UpdateBookRequest) (*UpdateBookResponse, error)
	DeleteBook(context.Context, *DeleteBookRequest) (*DeleteBookResponse, error)
	CreateAuthor(context.Context, *CreateAuthorRequest) (*CreateAuthorResponse, error)
	GetAuthor(context.Context, *ReadAuthorRequest) (*ReadAuthorResponse, error)
	GetAuthors(context.Context, *ReadAuthorsRequest) (*ReadAuthorsResponse, error)
	UpdateAuthor(context.Context, *UpdateAuthorRequest) (*UpdateAuthorResponse, error)
	DeleteAuthor(context.Context, *DeleteAuthorRequest) (*DeleteAuthorResponse, error)
	CreateBookAuthor(context.Context, *CreateBookAuthorRequest) (*CreateBookAuthorResponse, error)
	GetBookAuthor(context.Context, *ReadBookAuthorRequest) (*ReadBookAuthorResponse, error)
	GetBooksAuthors(context.Context, *ReadBooksAuthorsRequest) (*ReadBooksAuthorsResponse, error)
	UpdateBookAuthor(context.Context, *UpdateBookAuthorRequest) (*UpdateBookAuthorResponse, error)
	DeleteBookAuthor(context.Context, *DeleteBookAuthorRequest) (*DeleteBookAuthorResponse, error)
	GetAuthorsBook(context.Context, *ReadBookAuthorsRequest) (*ReadBookAuthorsResponse, error)
	GetAuthorBooks(context.Context, *ReadBooksAuthorRequest) (*ReadBooksAuthorResponse, error)
	mustEmbedUnimplementedBookServiceServer()
}

// UnimplementedBookServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBookServiceServer struct {
}

func (UnimplementedBookServiceServer) CreateBook(context.Context, *CreateBookRequest) (*CreateBookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBook not implemented")
}
func (UnimplementedBookServiceServer) GetBook(context.Context, *ReadBookRequest) (*ReadBookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBook not implemented")
}
func (UnimplementedBookServiceServer) GetBooks(context.Context, *ReadBooksRequest) (*ReadBooksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBooks not implemented")
}
func (UnimplementedBookServiceServer) UpdateBook(context.Context, *UpdateBookRequest) (*UpdateBookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBook not implemented")
}
func (UnimplementedBookServiceServer) DeleteBook(context.Context, *DeleteBookRequest) (*DeleteBookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBook not implemented")
}
func (UnimplementedBookServiceServer) CreateAuthor(context.Context, *CreateAuthorRequest) (*CreateAuthorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAuthor not implemented")
}
func (UnimplementedBookServiceServer) GetAuthor(context.Context, *ReadAuthorRequest) (*ReadAuthorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthor not implemented")
}
func (UnimplementedBookServiceServer) GetAuthors(context.Context, *ReadAuthorsRequest) (*ReadAuthorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthors not implemented")
}
func (UnimplementedBookServiceServer) UpdateAuthor(context.Context, *UpdateAuthorRequest) (*UpdateAuthorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAuthor not implemented")
}
func (UnimplementedBookServiceServer) DeleteAuthor(context.Context, *DeleteAuthorRequest) (*DeleteAuthorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAuthor not implemented")
}
func (UnimplementedBookServiceServer) CreateBookAuthor(context.Context, *CreateBookAuthorRequest) (*CreateBookAuthorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBookAuthor not implemented")
}
func (UnimplementedBookServiceServer) GetBookAuthor(context.Context, *ReadBookAuthorRequest) (*ReadBookAuthorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBookAuthor not implemented")
}
func (UnimplementedBookServiceServer) GetBooksAuthors(context.Context, *ReadBooksAuthorsRequest) (*ReadBooksAuthorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBooksAuthors not implemented")
}
func (UnimplementedBookServiceServer) UpdateBookAuthor(context.Context, *UpdateBookAuthorRequest) (*UpdateBookAuthorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBookAuthor not implemented")
}
func (UnimplementedBookServiceServer) DeleteBookAuthor(context.Context, *DeleteBookAuthorRequest) (*DeleteBookAuthorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBookAuthor not implemented")
}
func (UnimplementedBookServiceServer) GetAuthorsBook(context.Context, *ReadBookAuthorsRequest) (*ReadBookAuthorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthorsBook not implemented")
}
func (UnimplementedBookServiceServer) GetAuthorBooks(context.Context, *ReadBooksAuthorRequest) (*ReadBooksAuthorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthorBooks not implemented")
}
func (UnimplementedBookServiceServer) mustEmbedUnimplementedBookServiceServer() {}

// UnsafeBookServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookServiceServer will
// result in compilation errors.
type UnsafeBookServiceServer interface {
	mustEmbedUnimplementedBookServiceServer()
}

func RegisterBookServiceServer(s grpc.ServiceRegistrar, srv BookServiceServer) {
	s.RegisterService(&BookService_ServiceDesc, srv)
}

func _BookService_CreateBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServiceServer).CreateBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BooksDB.BookService/CreateBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServiceServer).CreateBook(ctx, req.(*CreateBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookService_GetBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServiceServer).GetBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BooksDB.BookService/GetBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServiceServer).GetBook(ctx, req.(*ReadBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookService_GetBooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadBooksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServiceServer).GetBooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BooksDB.BookService/GetBooks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServiceServer).GetBooks(ctx, req.(*ReadBooksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookService_UpdateBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServiceServer).UpdateBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BooksDB.BookService/UpdateBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServiceServer).UpdateBook(ctx, req.(*UpdateBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookService_DeleteBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServiceServer).DeleteBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BooksDB.BookService/DeleteBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServiceServer).DeleteBook(ctx, req.(*DeleteBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookService_CreateAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAuthorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServiceServer).CreateAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BooksDB.BookService/CreateAuthor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServiceServer).CreateAuthor(ctx, req.(*CreateAuthorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookService_GetAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadAuthorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServiceServer).GetAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BooksDB.BookService/GetAuthor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServiceServer).GetAuthor(ctx, req.(*ReadAuthorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookService_GetAuthors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadAuthorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServiceServer).GetAuthors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BooksDB.BookService/GetAuthors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServiceServer).GetAuthors(ctx, req.(*ReadAuthorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookService_UpdateAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAuthorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServiceServer).UpdateAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BooksDB.BookService/UpdateAuthor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServiceServer).UpdateAuthor(ctx, req.(*UpdateAuthorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookService_DeleteAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAuthorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServiceServer).DeleteAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BooksDB.BookService/DeleteAuthor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServiceServer).DeleteAuthor(ctx, req.(*DeleteAuthorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookService_CreateBookAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBookAuthorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServiceServer).CreateBookAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BooksDB.BookService/CreateBookAuthor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServiceServer).CreateBookAuthor(ctx, req.(*CreateBookAuthorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookService_GetBookAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadBookAuthorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServiceServer).GetBookAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BooksDB.BookService/GetBookAuthor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServiceServer).GetBookAuthor(ctx, req.(*ReadBookAuthorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookService_GetBooksAuthors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadBooksAuthorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServiceServer).GetBooksAuthors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BooksDB.BookService/GetBooksAuthors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServiceServer).GetBooksAuthors(ctx, req.(*ReadBooksAuthorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookService_UpdateBookAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBookAuthorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServiceServer).UpdateBookAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BooksDB.BookService/UpdateBookAuthor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServiceServer).UpdateBookAuthor(ctx, req.(*UpdateBookAuthorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookService_DeleteBookAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBookAuthorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServiceServer).DeleteBookAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BooksDB.BookService/DeleteBookAuthor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServiceServer).DeleteBookAuthor(ctx, req.(*DeleteBookAuthorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookService_GetAuthorsBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadBookAuthorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServiceServer).GetAuthorsBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BooksDB.BookService/GetAuthorsBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServiceServer).GetAuthorsBook(ctx, req.(*ReadBookAuthorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookService_GetAuthorBooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadBooksAuthorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServiceServer).GetAuthorBooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BooksDB.BookService/GetAuthorBooks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServiceServer).GetAuthorBooks(ctx, req.(*ReadBooksAuthorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BookService_ServiceDesc is the grpc.ServiceDesc for BookService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BookService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "BooksDB.BookService",
	HandlerType: (*BookServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBook",
			Handler:    _BookService_CreateBook_Handler,
		},
		{
			MethodName: "GetBook",
			Handler:    _BookService_GetBook_Handler,
		},
		{
			MethodName: "GetBooks",
			Handler:    _BookService_GetBooks_Handler,
		},
		{
			MethodName: "UpdateBook",
			Handler:    _BookService_UpdateBook_Handler,
		},
		{
			MethodName: "DeleteBook",
			Handler:    _BookService_DeleteBook_Handler,
		},
		{
			MethodName: "CreateAuthor",
			Handler:    _BookService_CreateAuthor_Handler,
		},
		{
			MethodName: "GetAuthor",
			Handler:    _BookService_GetAuthor_Handler,
		},
		{
			MethodName: "GetAuthors",
			Handler:    _BookService_GetAuthors_Handler,
		},
		{
			MethodName: "UpdateAuthor",
			Handler:    _BookService_UpdateAuthor_Handler,
		},
		{
			MethodName: "DeleteAuthor",
			Handler:    _BookService_DeleteAuthor_Handler,
		},
		{
			MethodName: "CreateBookAuthor",
			Handler:    _BookService_CreateBookAuthor_Handler,
		},
		{
			MethodName: "GetBookAuthor",
			Handler:    _BookService_GetBookAuthor_Handler,
		},
		{
			MethodName: "GetBooksAuthors",
			Handler:    _BookService_GetBooksAuthors_Handler,
		},
		{
			MethodName: "UpdateBookAuthor",
			Handler:    _BookService_UpdateBookAuthor_Handler,
		},
		{
			MethodName: "DeleteBookAuthor",
			Handler:    _BookService_DeleteBookAuthor_Handler,
		},
		{
			MethodName: "GetAuthorsBook",
			Handler:    _BookService_GetAuthorsBook_Handler,
		},
		{
			MethodName: "GetAuthorBooks",
			Handler:    _BookService_GetAuthorBooks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/BooksDB.proto",
}
